apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-allopen'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'jacoco'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: "de.mannodermaus.android-junit5"


android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.network.clever"
        multiDexEnabled true
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        ndk.abiFilters 'x86', 'x86_64', 'armeabi', 'armeabi-v7a', 'mips', 'mips64', 'arm64-v8a'
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArgument "runnerBuilder", "de.mannodermaus.junit5.AndroidJUnit5Builder"
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${variant.name}-${variant.versionCode}-${variant.versionName}.apk"
        }
    }

    buildTypes {
        debug {
            lintOptions {
                checkReleaseBuilds false
            }

            FirebasePerformance {
                // Set this flag to 'false' to disable @AddTrace annotation processing and
                // automatic HTTP/S network request monitoring
                // for a specific build variant at compile time.
                instrumentationEnabled false
            }

            initWith debug
            jniDebuggable true
            minifyEnabled true
            shrinkResources true
            testCoverageEnabled !project.hasProperty('android.injected.invoked.from.ide')
            signingConfig signingConfigs.debug
            multiDexKeepFile file('multidex-config.txt')
            multiDexKeepProguard file('multidex-config.pro')
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
//            signingConfig signingConfigs.release
            lintOptions {
                checkReleaseBuilds false
            }

            FirebasePerformance {
                // Set this flag to 'false' to disable @AddTrace annotation processing and
                // automatic HTTP/S network request monitoring
                // for a specific build variant at compile time.
                instrumentationEnabled false
            }

            initWith release
            minifyEnabled true
            shrinkResources true
            multiDexKeepFile file('multidex-config.txt')
            multiDexKeepProguard file('multidex-config.pro')
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }
        main {
            assets.srcDirs = ['src/main/res/raw']
        }

        androidTest.kotlin.srcDirs += "src/test-common/kotlin"
        test.kotlin.srcDirs += "src/test-common/kotlin"
        main.java.srcDirs += 'src/main/kotlin'
    }

    flavorDimensions "default"

    productFlavors {
        prod {
            dimension "default"
        }

        stg {
            dimension "default"
            applicationIdSuffix = ".stg"
        }

        dev {
            dimension "default"
            applicationIdSuffix = ".dev"
        }
    }

    splits {
        abi {
            enable true
            reset()
            include 'x86', 'x86_64', 'armeabi', 'armeabi-v7a', 'mips', 'mips64', 'arm64-v8a'
            universalApk true
        }
    }

    testOptions.unitTests.returnDefaultValues = true
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }

        testOptions {
            junitPlatform {
                // Don't raise errors about incorrect configuration
                // of JUnit 5 instrumentation tests
                instrumentationTests.integrityCheckEnabled = false
            }
        }

        unitTests.all {
            useJUnitPlatform()
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        kotlinOptions {
            suppressWarnings = true
            jvmTarget = '1.8'
            jvmTarget = JavaVersion.VERSION_1_8
            apiVersion = '1.4'
            languageVersion = '1.4'
        }
    }

    compileOptions {
        // Flag to enable support for the new language APIs
        // Sets Java compatibility to Java 8
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude "META-INF/LICENSE*"
    }
}

jacoco {
    toolVersion = "0.7.4+"
}

kapt {
    useBuildCache = true
}

androidExtensions {
    experimental = true
}

repositories {
    mavenCentral()
    jcenter()

    maven {
        url 'https://maven.fabric.io/public'
    }

    maven {
        url 'https://maven.google.com/'
        name 'Google'
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    implementation "androidx.core:core-ktx:$androidx_core_ktx_version"
    implementation "androidx.appcompat:appcompat:$androidx_appcompat_version"
    implementation "androidx.recyclerview:recyclerview:$androidx_version"
    implementation "androidx.cardview:cardview:$androidx_cardview_version"
    implementation "androidx.browser:browser:$androidx_browser_version"
    implementation "androidx.annotation:annotation:$androidx_version"
    implementation "androidx.multidex:multidex:$androidx_multidex_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$arch_lifecycle_version"
    // alternatively, just ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel:$arch_lifecycle_version"
    // alternatively, just LiveData
    implementation "androidx.lifecycle:lifecycle-livedata:$arch_livecycle_livedata_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$arch_livedata_ktx"
    // Lifecycles only (no ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime:$arch_lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$arch_lifecycle_ktx"
    implementation "androidx.lifecycle:lifecycle-common-java8:$arch_lifecycle_version"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"

    // Room (use 1.1.0-alpha1 for latest alpha)
    implementation "androidx.room:room-runtime:$arch_room_version"
    implementation "androidx.room:room-ktx:$arch_room_ktx"
    implementation "androidx.work:work-runtime-ktx:$arch_workmanager_version"
    implementation "androidx.work:work-rxjava2:$arch_workmanager_version"
    implementation "androidx.work:work-gcm:$arch_workmanager_version"
    annotationProcessor "androidx.room:room-compiler:$arch_room_version"
    kapt "androidx.room:room-compiler:$arch_room_version"

    // Paging
    implementation "androidx.paging:paging-runtime:$arch_paging_runtime_version"
    // Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:$arch_version"
    // Test helpers for Room
    testImplementation "androidx.room:room-testing:$arch_room_version"
    // ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$arch_lifecycle_version"

    //noinspection GradleDependency
    implementation "com.google.android.material:material:$design_support_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    implementation "com.squareup.retrofit2:retrofit:$retrofit2"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit2"
    implementation "com.squareup.okhttp3:okhttp:$okhttp3"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:$okhttp3"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp3"

    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-android-processor:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    implementation "com.google.android.gms:play-services-auth:18.1.0"

    implementation 'com.google.firebase:firebase-core:17.4.4'
    implementation 'com.google.firebase:firebase-auth:19.3.2'
    implementation 'com.google.firebase:firebase-analytics:17.4.4'
    implementation 'com.google.firebase:firebase-messaging:20.2.3'
    implementation 'com.google.firebase:firebase-dynamic-links:19.1.0'
    implementation 'com.google.firebase:firebase-perf:19.0.7'
    implementation 'com.google.firebase:firebase-config:19.2.0'
    implementation 'com.google.firebase:firebase-database:19.3.1'
    implementation 'com.google.firebase:firebase-storage:19.1.1'

    // Glide(Image library)
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    implementation 'com.github.bumptech.glide:annotations:4.11.0'
    kapt 'com.github.bumptech.glide:compiler:4.11.0'

    implementation "com.jakewharton.timber:timber:$timber_version"

    implementation 'com.github.franmontiel:PersistentCookieJar:v1.0.1'

    // Json Logging
    implementation 'com.orhanobut:logger:2.2.0'

    // Debuging Network & Resources
    implementation 'com.facebook.stetho:stetho:1.5.1'
    implementation 'com.facebook.stetho:stetho-okhttp3:1.5.1'

    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // (Required) Writing and executing Unit Tests on the JUnit Platform
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.6.2"

    // (Optional) If you need "Parameterized Tests"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.6.2"

    // (Optional) If you also have JUnit 4-based tests
    testImplementation "junit:junit:4.13"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.6.2"

    // Jupiter API & Test Runner, if you don't have it already
    androidTestImplementation "androidx.test:runner:1.2.0"
    androidTestImplementation "org.junit.jupiter:junit-jupiter-api:5.6.2"

    // The instrumentation test companion libraries
    androidTestImplementation "de.mannodermaus.junit5:android-test-core:1.2.0"
    androidTestRuntimeOnly "de.mannodermaus.junit5:android-test-runner:1.2.0"

    androidTestImplementation 'androidx.test:core:1.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'com.google.truth:truth:1.0'

    implementation 'com.github.meuus90:CleverBase:1.0.4'
}

task fullCoverageReport(type: JacocoReport) {
    dependsOn 'createDebugCoverageReport'
    dependsOn 'testDebugUnitTest'
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*',
                      '**/*_MembersInjector.class',
                      '**/Dagger*Component.class',
                      '**/Dagger*Component$Builder.class',
                      '**/*_*Factory.class',
                      '**/*ComponentImpl.class',
                      '**/*SubComponentBuilder.class']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/kotlin"

    getClassDirectories().setFrom(([mainSrc]))
    getClassDirectories().setFrom(files([debugTree]))
    getExecutionData().setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}
